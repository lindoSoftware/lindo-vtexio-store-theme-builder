{"version":3,"file":"baggage-span-processor.js","sourceRoot":"","sources":["../../src/baggage-span-processor.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,4CAA0D;AAO1D;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAa,oBAAoB;IAG/B;;;OAGG;IACH,YAAY,YAAiC;QAC3C,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,UAAU;QACR,QAAQ;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,IAAU,EAAE,aAAsB;;QACxC,CAAC,MAAA,MAAA,iBAAW,CAAC,UAAU,CAAC,aAAa,CAAC,0CAAE,aAAa,EAAE,mCAAI,EAAE,CAAC;aAC3D,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7C,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACnE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,CAAe;QACnB,QAAQ;IACV,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,QAAQ;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AA/CD,oDA+CC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaggageKeyPredicate } from './types';\nimport { Context, propagation } from '@opentelemetry/api';\nimport {\n  SpanProcessor,\n  Span,\n  ReadableSpan,\n} from '@opentelemetry/sdk-trace-base';\n\n/**\n * BaggageSpanProcessor is a {@link SpanProcessor} that reads entries stored in {@link Baggage}\n * from the parent context and adds the baggage entries' keys and\n * values to the span as attributes on span start.\n *\n * Add this span processor to a tracer provider.\n *\n * Keys and values added to Baggage will appear on subsequent child\n * spans for a trace within this service *and* be propagated to external\n * services in accordance with any configured propagation formats\n * configured. If the external services also have a Baggage span\n * processor, the keys and values will appear in those child spans as\n * well.\n *\n * ⚠ Warning ⚠️\n *\n * Do not put sensitive information in Baggage.\n *\n * To repeat: a consequence of adding data to Baggage is that the keys and\n * values will appear in all outgoing HTTP headers from the application.\n */\nexport class BaggageSpanProcessor implements SpanProcessor {\n  private _keyPredicate: BaggageKeyPredicate;\n\n  /**\n   * Constructs a new BaggageSpanProcessor instance.\n   * @param keyPredicate A predicate that determines whether a baggage key-value pair should be added to new spans as a span attribute.\n   */\n  constructor(keyPredicate: BaggageKeyPredicate) {\n    this._keyPredicate = keyPredicate;\n  }\n\n  /**\n   * Forces to export all finished spans\n   */\n  forceFlush(): Promise<void> {\n    // no-op\n    return Promise.resolve();\n  }\n\n  /**\n   * Called when a {@link Span} is started, if the `span.isRecording()`\n   * returns true.\n   * @param span the Span that just started.\n   */\n  onStart(span: Span, parentContext: Context): void {\n    (propagation.getBaggage(parentContext)?.getAllEntries() ?? [])\n      .filter(entry => this._keyPredicate(entry[0]))\n      .forEach(entry => span.setAttribute(entry[0], entry[1].value));\n  }\n\n  /**\n   * Called when a {@link ReadableSpan} is ended, if the `span.isRecording()`\n   * returns true.\n   * @param span the Span that just ended.\n   */\n  onEnd(_: ReadableSpan): void {\n    // no-op\n  }\n\n  /**\n   * Shuts down the processor. Called when SDK is shut down. This is an\n   * opportunity for processor to do any cleanup required.\n   */\n  shutdown(): Promise<void> {\n    // no-op\n    return Promise.resolve();\n  }\n}\n"]}