{"version":3,"file":"BaseMetrics.js","sourceRoot":"","sources":["../../src/BaseMetrics.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4CAAyE;AAEzE,kBAAkB;AAClB,uCAA0D;AAY1D,MAAM,YAAY,GAAG,sBAAY,CAAC;AAElC;;GAEG;AACH,MAAsB,WAAW;IAK/B,YAAY,MAA+B;;QAJjC,YAAO,GAAG,UAAI,CAAC;QAKvB,qEAAqE;QACrE,qCAAqC;QACrC,IAAI,CAAC,KAAK,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,KAAI,YAAY,CAAC;QAC1C,IAAI,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,aAAa,KAAI,IAAI,EAAE;YACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;SACvD;QACD,MAAM,aAAa,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,aAAa,mCAAI,aAAO,CAAC,gBAAgB,EAAE,CAAC;QAC1E,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAe,CAAC,CAAC;IACpE,CAAC;CAWF;AAzBD,kCAyBC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterProvider, diag, metrics } from '@opentelemetry/api';\n\n/** @knipignore */\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\n/**\n * Metrics Collector Configuration\n */\nexport interface MetricsCollectorConfig {\n  // Meter Provider\n  meterProvider?: MeterProvider;\n  // Name of component\n  name?: string;\n}\n\nconst DEFAULT_NAME = PACKAGE_NAME;\n\n/**\n * Base Class for metrics\n */\nexport abstract class BaseMetrics {\n  protected _logger = diag;\n  protected _meter: Meter;\n  private _name: string;\n\n  constructor(config?: MetricsCollectorConfig) {\n    // Do not use `??` operator to allow falling back to default when the\n    // specified name is an empty string.\n    this._name = config?.name || DEFAULT_NAME;\n    if (config?.meterProvider == null) {\n      this._logger.warn('No meter provider, using default');\n    }\n    const meterProvider = config?.meterProvider ?? metrics.getMeterProvider();\n    this._meter = meterProvider.getMeter(this._name, PACKAGE_VERSION);\n  }\n\n  /**\n   * Creates metrics\n   */\n  protected abstract _createMetrics(): void;\n\n  /**\n   * Starts collecting stats\n   */\n  public abstract start(): void;\n}\n"]}