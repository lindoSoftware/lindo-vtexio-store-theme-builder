"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appPath = exports.startApp = void 0;
const telemetry_1 = require("./telemetry");
const cluster_1 = __importDefault(require("cluster"));
const constants_1 = require("../constants");
const MetricsAccumulator_1 = require("../metrics/MetricsAccumulator");
const loaders_1 = require("./loaders");
const logger_1 = require("./logger");
const startApp = async () => {
    await (0, telemetry_1.initializeTelemetry)();
    // Initialize global.metrics for both master and worker processes
    global.metrics = new MetricsAccumulator_1.MetricsAccumulator();
    const serviceJSON = (0, loaders_1.getServiceJSON)();
    try {
        // if it is a master process then call setting up worker process
        if (cluster_1.default.isMaster) {
            const { startMaster } = await Promise.resolve().then(() => __importStar(require('./master')));
            startMaster(serviceJSON);
        }
        else {
            // to setup server configurations and share port address for incoming requests
            const { startWorker } = await Promise.resolve().then(() => __importStar(require('./worker')));
            const app = await startWorker(serviceJSON);
            app.listen(constants_1.HTTP_SERVER_PORT);
        }
    }
    catch (err) {
        (0, logger_1.logOnceToDevConsole)(err.stack || err.message, logger_1.LogLevel.Error);
        process.exit(2);
    }
};
exports.startApp = startApp;
var loaders_2 = require("./loaders");
Object.defineProperty(exports, "appPath", { enumerable: true, get: function () { return loaders_2.appPath; } });
