"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeKeys = exports.HeaderKeys = void 0;
const diagnostics_semconv_1 = require("@vtex/diagnostics-semconv");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
exports.HeaderKeys = {
    VTEX_OPERATION_ID: 'X-VTEX-Operation-ID',
    VTEX_USER_AGENT: 'X-VTEX-User-Agent',
    VTEX_IO_CALLER: 'X-VTEX-IO-Caller',
    VTEX_APP_SERVICE: 'X-VTEX-App-Service',
    VTEX_APP_KEY: 'X-VTEX-App-Key',
    VTEX_RETRY_COUNT: 'X-VTEX-Retry-Count',
    FORWARDED_FOR: 'X-Forwarded-For'
};
exports.AttributeKeys = {
    HTTP_METHOD: semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD,
    HTTP_URL: semantic_conventions_1.ATTR_URL_FULL,
    HTTP_ROUTE: semantic_conventions_1.ATTR_HTTP_ROUTE,
    HTTP_HOST: "host.name",
    HTTP_USER_AGENT: semantic_conventions_1.ATTR_USER_AGENT_ORIGINAL,
    HTTP_STATUS_CODE: semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE,
    HTTP_CLIENT_IP: 'client.address',
    ERROR: 'error',
    VTEX_OPERATION_ID: diagnostics_semconv_1.ATTR_VTEX_OPERATION_ID,
    VTEX_USER_AGENT: diagnostics_semconv_1.ATTR_VTEX_USER_AGENT,
    VTEX_IDENTITY_USERNAME: diagnostics_semconv_1.ATTR_VTEX_IDENTITY_USER_NAME,
    VTEX_IDENTITY_USER_ID: diagnostics_semconv_1.ATTR_VTEX_IDENTITY_USER_ID,
    VTEX_RETRY_COUNT: 'vtex.retry_count',
    VTEX_ACCOUNT_NAME: diagnostics_semconv_1.ATTR_VTEX_ACCOUNT_NAME,
};
//# sourceMappingURL=constants.js.map