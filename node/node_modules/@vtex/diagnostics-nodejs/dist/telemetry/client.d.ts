import { Resource } from '@opentelemetry/resources';
import * as metrics from '../metrics';
import { LogClient, TraceClient, MetricsClientConfig, LogsClientConfig, TracesClientConfig } from '../types';
import { TelemetryClientOptions } from '../types/telemetry';
import { ConfigManager, ConfigManagerOptions } from '../config';
import { Instrumentation } from '@opentelemetry/instrumentation';
export declare class TelemetryClient {
    private resource;
    private clientName;
    private serviceName;
    private options;
    private configManager;
    private noop;
    private traceClient?;
    private logClient?;
    private metricsClient?;
    constructor(clientName: string, serviceName: string, resource: Resource, configManager: ConfigManager, options?: TelemetryClientOptions);
    private setupBaggageProcessor;
    private setupVtexProcessor;
    newLogsClient(overrides?: Partial<LogsClientConfig>): Promise<LogClient>;
    newTracesClient(overrides?: Partial<Omit<TracesClientConfig, 'resource'>>): Promise<TraceClient>;
    newMetricsClient(overrides?: Partial<MetricsClientConfig>): Promise<metrics.MetricsClient>;
    private createNoopLogsClient;
    private createNoopTracesClient;
    private createNoopMetricsClient;
    registerInstrumentations(instrumentations: Instrumentation[]): void;
    getGlobalProviderInfo(): {
        exists: boolean;
        provider?: any;
    };
}
export declare function NewTelemetryClient(applicationID: string, clientName: string, serviceName: string, options?: TelemetryClientOptions & {
    config?: ConfigManagerOptions;
}): Promise<TelemetryClient>;
//# sourceMappingURL=client.d.ts.map