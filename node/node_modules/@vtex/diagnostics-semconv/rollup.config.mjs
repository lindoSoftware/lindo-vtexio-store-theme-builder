import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import typescript from '@rollup/plugin-typescript';
import terser from '@rollup/plugin-terser';
import { readFileSync } from 'fs';

const pkg = JSON.parse(readFileSync(new URL('./package.json', import.meta.url), 'utf-8'));

const externalPkgs = ['react'];

const esmConfig = {
  input: 'src/index.ts',
  output: {
    dir: 'dist/esm',
    format: 'esm',
    preserveModules: true,
    preserveModulesRoot: 'src',
    sourcemap: true,
    exports: 'named'
  },
  external: externalPkgs,
  plugins: [
    resolve({ browser: true, preferBuiltins: false }),
    commonjs(),
    typescript({
      tsconfig: './tsconfig.json',
      declaration: true,
      declarationDir: null,
      outDir: 'dist/esm',
      rootDir: 'src'
    })
  ]
};

// CJS Config
const cjsConfig = {
  input: 'src/index.ts',
  output: {
    dir: 'dist/cjs',
    format: 'cjs',
    preserveModules: true,
    preserveModulesRoot: 'src',
    sourcemap: true,
    exports: 'named',
    entryFileNames: '[name].cjs'
  },
  external: externalPkgs,
  plugins: [
    resolve({ browser: true, preferBuiltins: false }),
    commonjs(),
    typescript({
      tsconfig: './tsconfig.json',
      declaration: true,
      declarationDir: null,
      outDir: 'dist/cjs',
      rootDir: 'src'
    })
  ]
};

// UMD Config
const umdConfig = {
  input: 'src/index.ts',
  output: {
    file: 'dist/umd/index.js',
    format: 'umd',
    name: 'VtexDiagnosticsWeb',
    sourcemap: true,
    globals: { react: 'React' },
    inlineDynamicImports: true,
    exports: 'named'
  },
  external: externalPkgs,
  plugins: [
    resolve({ browser: true, preferBuiltins: false, mainFields: ['browser', 'module', 'main'] }),
    commonjs({ transformMixedEsModules: true, include: /node_modules/ }),
    typescript({
      tsconfig: './tsconfig.json',
      declaration: true,
      declarationDir: null,
      outDir: 'dist/umd',
      rootDir: 'src'
    }),
    terser({
      format: { comments: false, ecma: 2017 },
      compress: { ecma: 2017 },
      mangle: { keep_fnames: true, keep_classnames: true }
    })
  ]
};

export default [esmConfig, cjsConfig, umdConfig];
